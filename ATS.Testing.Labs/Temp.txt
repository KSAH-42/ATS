/*

ATS.Client
ATS.Client.Configuration
ATS.Client.Entities
ATS.Client.Entities.Transactions
ATS.Client.Events
ATS.Client.Services
ATS.Client.Messaging
ATS.Client.Messaging.Http
ATS.Client.Messaging.Tcp
ATS.Client.Messaging.Sql
ATS.Client.Threading

*/


    using ATS.Client;
	using ATS.Client.Requests;
	using ATS.Client.Responses;
	using System.Threading;
	using System.Threading.Tasks;

	public class Client : IClient
	{
		public object SyncRoot => throw new NotImplementedException();

		public Guid? SessionId => throw new NotImplementedException();

		public TimeSpan Timeout {get;set;}

		public DOReadOnlyCache<DOEntity> Entities => throw new NotImplementedException();

		public PermissionReadOnlyList Permissions => throw new NotImplementedException();

		public HandlerList Handlers => throw new NotImplementedException();

		public bool IsConnected => throw new NotImplementedException();

		public AuthenticationResponse Authenticate( AuthenticationRequest request )
		{
			return Invoke<AuthenticationResponse>( new AuthenicationController( request ) );
		}

		public Task<AuthenticationResponse> AuthenticateAsync( AuthenticationRequest request )
		{
			return InvokeAsync<AuthenticationResponse>( new AuthenicationController( request ) );
		}

		public Task<AuthenticationResponse> AuthenticateAsync( AuthenticationRequest request , CancellationToken cancellationToken )
		{
			throw new NotImplementedException();
		}

		public CloseAccountResponse CloseAccount( CloseAccountResponse request )
		{
			throw new NotImplementedException();
		}

		public Task<CloseAccountResponse> CloseAccount( CloseAccountRequest request )
		{
			throw new NotImplementedException();
		}

		public Task<CloseAccountResponse> CloseAccount( CloseAccountRequest request , CancellationToken cancellationToken )
		{
			throw new NotImplementedException();
		}

		public void Connect( string server )
		{
			throw new NotImplementedException();
		}

		public Task ConnectAsync( string server )
		{
			throw new NotImplementedException();
		}

		public Task ConnectAsync( string server , CancellationToken cancellationToken )
		{
			throw new NotImplementedException();
		}

		public DeleteEntitiesResponse DeleteEntities()
		{
			throw new NotImplementedException();
		}

		public DeleteEntitiesResponse DeleteEntities( DeleteEntitiesRequest request )
		{
			throw new NotImplementedException();
		}

		public Task<DeleteEntitiesResponse> DeleteEntitiesAsync()
		{
			throw new NotImplementedException();
		}

		public Task<DeleteEntitiesResponse> DeleteEntitiesAsync( CancellationToken cancellationToken )
		{
			throw new NotImplementedException();
		}

		public Task<DeleteEntitiesResponse> DeleteEntitiesAsync( DeleteEntitiesRequest request )
		{
			throw new NotImplementedException();
		}

		public Task<DeleteEntitiesResponse> DeleteEntitiesAsync( DeleteEntitiesRequest request , CancellationToken cancellationToken )
		{
			throw new NotImplementedException();
		}

		public DeleteEntityResponse DeleteEntity( DeleteEntityRequest request )
		{
			throw new NotImplementedException();
		}

		public Task<DeleteEntityResponse> DeleteEntityAsync( DeleteEntityRequest request )
		{
			throw new NotImplementedException();
		}

		public Task<DeleteEntityResponse> DeleteEntityAsync( DeleteEntityRequest request , CancellationToken cancellationToken )
		{
			throw new NotImplementedException();
		}

		public DeleteEventResponse DeleteEvent( DeleteEventRequest request )
		{
			throw new NotImplementedException();
		}

		public Task<DeleteEventResponse> DeleteEventAsync( DeleteEventRequest request )
		{
			throw new NotImplementedException();
		}

		public Task<DeleteEventResponse> DeleteEventAsync( DeleteEventRequest request , CancellationToken cancellationToken )
		{
			throw new NotImplementedException();
		}

		public DeleteEventsResponse DeleteEvents()
		{
			throw new NotImplementedException();
		}

		public DeleteEventsResponse DeleteEvents( DeleteEventsRequest request )
		{
			throw new NotImplementedException();
		}

		public Task<DeleteEventsResponse> DeleteEventsAsync()
		{
			throw new NotImplementedException();
		}

		public Task<DeleteEventsResponse> DeleteEventsAsync( CancellationToken cancellationToken )
		{
			throw new NotImplementedException();
		}

		public Task<DeleteEventsResponse> DeleteEventsAsync( DeleteEventsRequest request )
		{
			throw new NotImplementedException();
		}

		public Task<DeleteEventsResponse> DeleteEventsAsync( DeleteEventsRequest request , CancellationToken cancellationToken )
		{
			throw new NotImplementedException();
		}

		public DeleteTransactionResponse DeleteTransaction( DeleteTransactionRequest request )
		{
			throw new NotImplementedException();
		}

		public Task<DeleteTransactionResponse> DeleteTransactionAsync( DeleteTransactionRequest request )
		{
			throw new NotImplementedException();
		}

		public Task<DeleteTransactionResponse> DeleteTransactionAsync( DeleteTransactionRequest request , CancellationToken cancellationToken )
		{
			throw new NotImplementedException();
		}

		public DeleteTransactionsResponse DeleteTransactions()
		{
			throw new NotImplementedException();
		}

		public DeleteTransactionsResponse DeleteTransactions( DeleteTransactionsRequest request )
		{
			throw new NotImplementedException();
		}

		public Task<DeleteTransactionsResponse> DeleteTransactionsAsync()
		{
			throw new NotImplementedException();
		}

		public Task<DeleteTransactionsResponse> DeleteTransactionsAsync( CancellationToken cancellationToken )
		{
			throw new NotImplementedException();
		}

		public Task<DeleteTransactionsResponse> DeleteTransactionsAsync( DeleteTransactionsRequest request )
		{
			throw new NotImplementedException();
		}

		public Task<DeleteTransactionsResponse> DeleteTransactionsAsync( DeleteTransactionsRequest request , CancellationToken cancellationToken )
		{
			throw new NotImplementedException();
		}

		public DepositResponse Deposit( DepositRequest request )
		{
			throw new NotImplementedException();
		}

		public Task<DepositResponse> DepositAsync( DepositRequest request )
		{
			throw new NotImplementedException();
		}

		public Task<DepositResponse> DepositAsync( DepositRequest request , CancellationToken cancellationToken )
		{
			throw new NotImplementedException();
		}

		public DisableCardResponse DisableCard( DisableCardRequest request )
		{
			throw new NotImplementedException();
		}

		public Task<DisableCardResponse> DisableCardAsync( DisableCardRequest request )
		{
			throw new NotImplementedException();
		}

		public Task<DisableCardResponse> DisableCardAsync( DisableCardRequest request , CancellationToken cancellationToken )
		{
			throw new NotImplementedException();
		}

		public void Disconnect()
		{
			throw new NotImplementedException();
		}

		public EnableCardResponse EnableCard( EnableCardRequest request )
		{
			throw new NotImplementedException();
		}

		public Task<EnableCardResponse> EnableCardAsync( EnableCardRequest request )
		{
			throw new NotImplementedException();
		}

		public Task<EnableCardResponse> EnableCardAsync( EnableCardRequest request , CancellationToken cancellationToken )
		{
			throw new NotImplementedException();
		}

		public FindEntityResponse FindEntity( FindEntityRequest request )
		{
			throw new NotImplementedException();
		}

		public Task<FindEntityResponse> FindEntityAsync( FindEntityRequest request )
		{
			throw new NotImplementedException();
		}

		public Task<FindEntityResponse> FindEntityAsync( FindEntityRequest request , CancellationToken cancellationToken )
		{
			throw new NotImplementedException();
		}

		public FindEventResponse FindEvent( FindEventRequest request )
		{
			throw new NotImplementedException();
		}

		public Task<FindEventResponse> FindEventAsync( FindEventRequest request )
		{
			throw new NotImplementedException();
		}

		public Task<FindEventResponse> FindEventAsync( FindEventRequest request , CancellationToken cancellationToken )
		{
			throw new NotImplementedException();
		}

		public FindTransactionResponse FindTransaction( FindTransactionRequest request )
		{
			throw new NotImplementedException();
		}

		public Task<FindTransactionResponse> FindTransactionAsync( FindTransactionRequest request )
		{
			throw new NotImplementedException();
		}

		public Task<FindTransactionResponse> FindTransactionAsync( FindTransactionRequest request , CancellationToken cancellationToken )
		{
			throw new NotImplementedException();
		}

		public ListEntitiesResponse ListEntities()
		{
			throw new NotImplementedException();
		}

		public ListEntitiesResponse ListEntities( ListEntitiesRequest request )
		{
			throw new NotImplementedException();
		}

		public Task<ListEntitiesResponse> ListEntitiesAsync()
		{
			throw new NotImplementedException();
		}

		public Task<ListEntitiesResponse> ListEntitiesAsync( CancellationToken cancellationToken )
		{
			throw new NotImplementedException();
		}

		public Task<ListEntitiesResponse> ListEntitiesAsync( ListEntitiesRequest request )
		{
			throw new NotImplementedException();
		}

		public Task<ListEntitiesResponse> ListEntitiesAsync( ListEntitiesRequest request , CancellationToken cancellationToken )
		{
			throw new NotImplementedException();
		}

		public ListEventsResponse ListEvents()
		{
			throw new NotImplementedException();
		}

		public ListEventsResponse ListEvents( ListEventsRequest request )
		{
			throw new NotImplementedException();
		}

		public Task<ListEventsResponse> ListEventsAsync()
		{
			throw new NotImplementedException();
		}

		public Task<ListEventsResponse> ListEventsAsync( CancellationToken cancellationToken )
		{
			throw new NotImplementedException();
		}

		public Task<ListEventsResponse> ListEventsAsync( ListEventsRequest request )
		{
			throw new NotImplementedException();
		}

		public Task<ListEventsResponse> ListEventsAsync( ListEventsRequest request , CancellationToken cancellationToken )
		{
			throw new NotImplementedException();
		}

		public ListTransactionsResponse ListTransactions()
		{
			throw new NotImplementedException();
		}

		public ListTransactionsResponse ListTransactions( ListTransactionsRequest request )
		{
			throw new NotImplementedException();
		}

		public Task<ListTransactionsResponse> ListTransactionsAsync()
		{
			throw new NotImplementedException();
		}

		public Task<ListTransactionsResponse> ListTransactionsAsync( CancellationToken cancellationToken )
		{
			throw new NotImplementedException();
		}

		public Task<ListTransactionsResponse> ListTransactionsAsync( ListTransactionsRequest request )
		{
			throw new NotImplementedException();
		}

		public Task<ListTransactionsResponse> ListTransactionsAsync( ListTransactionsRequest request , CancellationToken cancellationToken )
		{
			throw new NotImplementedException();
		}

		public OpenAccountResponse OpenAccount( OpenAccountRequest request )
		{
			throw new NotImplementedException();
		}

		public Task<OpenAccountResponse> OpenAccountAsync( OpenAccountRequest request )
		{
			throw new NotImplementedException();
		}

		public Task<OpenAccountResponse> OpenAccountAsync( OpenAccountRequest request , CancellationToken cancellationToken )
		{
			throw new NotImplementedException();
		}

		public void Ping()
		{
			throw new NotImplementedException();
		}

		public ReOpenAccountResponse ReOpenAccount( ReOpenAccountRequest request )
		{
			throw new NotImplementedException();
		}

		public Task<ReOpenAccountResponse> ReOpenAccountAsync( ReOpenAccountRequest request )
		{
			throw new NotImplementedException();
		}

		public Task<ReOpenAccountResponse> ReOpenAccountAsync( ReOpenAccountRequest request , CancellationToken cancellationToken )
		{
			throw new NotImplementedException();
		}

		public SaveEntityResponse SaveEntity( SaveEntityRequest request )
		{
			throw new NotImplementedException();
		}

		public Task<SaveEntityResponse> SaveEntityAsync( SaveEntityRequest request )
		{
			throw new NotImplementedException();
		}

		public Task<SaveEntityResponse> SaveEntityAsync( SaveEntityRequest request , CancellationToken cancellationToken )
		{
			throw new NotImplementedException();
		}

		public SaveEventResponse SaveEvent( SaveEventRequest request )
		{
			throw new NotImplementedException();
		}

		public Task<SaveEventResponse> SaveEventAsync( SaveEventRequest request )
		{
			throw new NotImplementedException();
		}

		public Task<SaveEventResponse> SaveEventAsync( SaveEventRequest request , CancellationToken cancellationToken )
		{
			throw new NotImplementedException();
		}

		public SaveTransactionResponse SaveTransaction( SaveTransactionRequest request )
		{
			throw new NotImplementedException();
		}

		public Task<SaveTransactionResponse> SaveTransactionAsync( SaveTransactionRequest request )
		{
			throw new NotImplementedException();
		}

		public Task<SaveTransactionResponse> SaveTransactionAsync( SaveTransactionRequest request , CancellationToken cancellationToken )
		{
			throw new NotImplementedException();
		}

		public SearchEventsResponse SearchEvents( SearchEventsRequest request )
		{
			throw new NotImplementedException();
		}

		public Task<SearchEventsResponse> SearchEventsAsync( SearchEventsRequest request )
		{
			throw new NotImplementedException();
		}

		public Task<SearchEventsResponse> SearchEventsAsync( SearchEventsRequest request , CancellationToken cancellationToken )
		{
			throw new NotImplementedException();
		}

		public SearchTransactionsResponse SearchTransactions( SearchTransactionsRequest request )
		{
			throw new NotImplementedException();
		}

		public Task<SearchTransactionsResponse> SearchTransactionsAsync( SearchTransactionsRequest request )
		{
			throw new NotImplementedException();
		}

		public Task<SearchTransactionsResponse> SearchTransactionsAsync( SearchTransactionsRequest request , CancellationToken cancellationToken )
		{
			throw new NotImplementedException();
		}

		public WithdrawResponse Withdraw( WithdrawRequest request )
		{
			throw new NotImplementedException();
		}

		public Task<WithdrawResponse> WithdrawAsync( WithdrawRequest request )
		{
			throw new NotImplementedException();
		}

		public Task<WithdrawResponse> WithdrawAsync( WithdrawRequest request , CancellationToken cancellationToken )
		{
			throw new NotImplementedException();
		}


		public FooResponse Foo( FooRequest request )
		{
		    throw new NotImplementedException();
		}

	}

	public abstract class RequestInvoker
	{
	    public abstract Response Execute();

		public DbContext Database { get; set };
	}

	
	public class FooRequestInvoker : RequestInvoker
	{
	    private readonly FooRequest _request;

		public FooRequestInvoker( FooRequest request )
		{
		  _request = request;
		}

	    public Response Execute()
		{
		    Database.ExecuteSql( "delete from my_table" );

		    return new FooResponse() { Result = request.Param1 + request.Param2 } ;
		}
	}


	